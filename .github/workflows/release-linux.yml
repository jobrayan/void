name: Release (Linux x64)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: release-linux-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  issues: read
  pull-requests: read

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    env:
      # Needed by semantic-release to publish a GitHub Release
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Disable any accidental signing discovery in CI
      CSC_IDENTITY_AUTO_DISCOVERY: "false"
      # Skip unnecessary browser downloads
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: "1"

    steps:
      # --- Git & Node toolchain ---
      - name: Checkout (full history for tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      # --- System packages for native node modules & Electron runtime ---
      # Provides build-essential toolchain + headers for kerberos/gssapi and x11/keymap.
      - name: Install system libraries for native modules
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends build-essential python3 pkg-config libkrb5-dev libsecret-1-dev libxkbfile-dev libxkbcommon-dev libxkbcommon-x11-dev libx11-dev libnss3 libgtk-3-0 libatk-bridge2.0-0 libgbm-dev

      # --- JS deps ---
      - name: Install dependencies
        run: npm ci

      - name: Verify gulp is available
        run: npx --yes gulp --version

      # --- Build (VS Code-style) ---
      - name: Compile sources
        run: |
          # VS Code/void build uses gulp tasks
          npx --yes gulp compile

      - name: Build VS Code-style Linux x64 bundle
        run: |
          # Produces .build/electron/linux-x64/** (or similar)
          npx --yes gulp vscode-linux-x64

      # Helpful when debugging CI
      - name: List built artifacts (debug)
        run: |
          echo "Tree under .build/"
          (ls -alh .build || true)
          (find .build -maxdepth 3 -type f | sort || true)

      # --- Prepare release files for semantic-release@github assets ---
      - name: Prepare release assets
        run: |
          mkdir -p release
          # Prefer prebuilt archives from gulp (zip/tar.gz)
          if compgen -G ".build/**/*linux-x64*.zip" > /dev/null; then
            cp -v $(ls .build/**/*linux-x64*.zip) release/ || true
          fi
          if compgen -G ".build/**/*linux-x64*.tar.gz" > /dev/null; then
            cp -v $(ls .build/**/*linux-x64*.tar.gz) release/ || true
          fi
          # Fallback: tar the linux-x64 folder if no archive exists
          if [ -z "$(ls -A release 2>/dev/null)" ]; then
            LINUX_DIR="$(find .build -type d -name '*linux-x64*' | head -n1 || true)"
            if [ -n "$LINUX_DIR" ]; then
              ARCHIVE="void-linux-x64-$(date +%Y%m%d%H%M).tar.gz"
              tar -czf "release/$ARCHIVE" -C "$LINUX_DIR/.." "$(basename "$LINUX_DIR")"
            fi
          fi
          echo "Release assets:"
          ls -alh release || true

      # --- Publish Release via semantic-release ---
      - name: Semantic Release
        env:
          GIT_AUTHOR_NAME: "Nathan Jobrayan"
          GIT_AUTHOR_EMAIL: "nathanjobrayan@gmail.com"
          GIT_COMMITTER_NAME: "Nathan Jobrayan"
          GIT_COMMITTER_EMAIL: "nathanjobrayan@gmail.com"
        run: npm run release
