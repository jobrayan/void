name: Release (Linux x64)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: release-linux-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  issues: read
  pull-requests: read

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    timeout-minutes: 90

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      CSC_IDENTITY_AUTO_DISCOVERY: "false"
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: "1"
      CI: "true"
      ELECTRON_MIRROR: https://npmmirror.com/mirrors/electron/
      npm_config_fetch_retries: "5"
      npm_config_fetch_retry_factor: "2"
      npm_config_fetch_retry_maxtimeout: "300000"
      npm_config_network_timeout: "600000"

    steps:
      - name: Checkout (full history for tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install system libraries for native modules
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            python3 \
            pkg-config \
            libkrb5-dev \
            libsecret-1-dev \
            libxkbfile-dev \
            libxkbcommon-dev \
            libxkbcommon-x11-dev \
            libx11-dev \
            libnss3 \
            libgtk-3-0 \
            libatk-bridge2.0-0 \
            libgbm-dev

      - name: Install dependencies
        run: npm ci

      - name: Verify gulp is available
        run: npx --yes gulp --version

      - name: Build React (void UI)
        run: npm run buildreact

      - name: Compile sources (gulp compile)
        run: npx --yes gulp compile

      - name: Create CI vinyl-fs patch
        run: |
          mkdir -p build
          cat > build/ci-vfs-patch.cjs <<'JS'
          const vfs = require('vinyl-fs'); const realSrc = vfs.src;
          const { Readable } = require('stream');
          function empty(){ return Readable.from([]); }
          function clean(g){
            if(Array.isArray(g)){ const a=g.filter(s=>typeof s==='string'&&s.trim()); return a.length?a:null; }
            if(typeof g==='string') return g.trim()?g:null;
            return null;
          }
          vfs.src = function(globs, opts){ const safe=clean(globs); return safe?realSrc.call(this,safe,opts):empty(); };

          try {
            const srcPath = require.resolve('vinyl-fs/lib/src/index.js');
            const real = require(srcPath);
            if (typeof real === 'function' && require.cache[srcPath]) {
              require.cache[srcPath].exports = function(globs, opts){
                const safe = clean(globs); return safe?real.call(this,safe,opts):empty();
              };
            }
          } catch {}
          JS

      - name: Package Linux x64 (CI variant)
        env:
          NODE_OPTIONS: "--require ./build/ci-vfs-patch.cjs"
        run: npx --yes gulp vscode-linux-x64-min-ci

      - name: List built artifacts (debug)
        run: |
          echo "Tree under .build/"
          (ls -alh .build || true)
          (find .build -maxdepth 4 -type f | sort || true)

      - name: Prepare release assets
        run: |
          set -euxo pipefail
          mkdir -p release
          shopt -s globstar nullglob
          for pattern in \
            ".build/**/*linux-x64*.zip" \
            ".build/**/*linux-x64*.tar.gz" \
            ".build/**/linux-x64/**/archive/*.zip" \
            ".build/**/linux-x64/**/archive/*.tar.gz"; do
            for f in $pattern; do
              echo "Collecting $f"
              cp -v "$f" release/ || true
            done
          done
          if [ -z "$(ls -A release 2>/dev/null)" ]; then
            LINUX_DIR="$(find .build -type d -name '*linux-x64*' | head -n1 || true)"
            if [ -n "$LINUX_DIR" ]; then
              ARCHIVE="void-linux-x64-$(date +%Y%m%d%H%M).tar.gz"
              tar -czf "release/$ARCHIVE" -C "$LINUX_DIR/.." "$(basename "$LINUX_DIR")"
            fi
          fi
          echo "Release assets:"; ls -alh release || true

      - name: Upload build artifacts (debug)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: linux-x64-release
          path: release/*
          if-no-files-found: ignore

      - name: Semantic Release
        env:
          GIT_AUTHOR_NAME: "Nathan Jobrayan"
          GIT_AUTHOR_EMAIL: "nathanjobrayan@gmail.com"
          GIT_COMMITTER_NAME: "Nathan Jobrayan"
          GIT_COMMITTER_EMAIL: "nathanjobrayan@gmail.com"
        run: npm run release
