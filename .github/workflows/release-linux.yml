# Workflow: Release (Linux x64)
# Goal: Build Void (VS Code fork) for Linux x64 and publish a GitHub Release via semantic-release.
# Key steps:
#  - Install native toolchain & headers needed by kerberos/x11/native modules
#  - npm ci
#  - Build Void React UI (generates ./react/out/** bundles)
#  - gulp compile && gulp vscode-linux-x64
#  - Collect artifacts under ./release and run semantic-release

name: Release (Linux x64)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

concurrency:
  group: release-linux-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write    # semantic-release needs this
  issues: read
  pull-requests: read

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    timeout-minutes: 90

    env:
      # Used by semantic-release to publish
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Avoid accidental code signing on CI
      CSC_IDENTITY_AUTO_DISCOVERY: "false"
      # Save CI time
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: "1"
      # Give Node more headroom during compile
      NODE_OPTIONS: "--max_old_space_size=8192"

    steps:
      # ── Git & Node ──────────────────────────────────────────────────────────────
      - name: Checkout (full history for tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      # ── Native toolchain & headers for node-gyp modules and Electron runtime ───
      - name: Install system libraries for native modules
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential python3 pkg-config \
            libkrb5-dev libsecret-1-dev \
            libxkbfile-dev libxkbcommon-dev libxkbcommon-x11-dev libx11-dev \
            libnss3 libasound2 libgtk-3-0 libatk-bridge2.0-0 libgbm-dev

      # ── JS deps ────────────────────────────────────────────────────────────────
      - name: Install dependencies
        run: npm ci

      - name: Verify gulp is available
        run: npx --yes gulp --version

      # ── Build React UI bundles required by TS imports (react/out/**) ───────────
      - name: Build Void React UI
        run: |
          set -euo pipefail
          npm run buildreact
          # Sanity check: verify at least one built entry exists
          test -e ./src/vs/workbench/contrib/void/browser/react/out/void-tooltip/index.js

      # ── Compile & package ──────────────────────────────────────────────────────
      - name: Compile sources
        run: npx --yes gulp compile

      - name: Build VS Code-style Linux x64 bundle
        run: npx --yes gulp vscode-linux-x64

      - name: List built artifacts (debug)
        run: |
          echo "Tree under .build/"
          (ls -alh .build || true)
          (find .build -maxdepth 3 -type f | sort || true)

      # ── Prepare files for the GitHub Release (semantic-release github assets) ─
      - name: Prepare release assets
        run: |
          set -euo pipefail
          mkdir -p release
          # Prefer archives produced by gulp, if present
          if compgen -G ".build/**/*linux-x64*.zip" > /dev/null; then
            cp -v $(ls .build/**/*linux-x64*.zip) release/ || true
          fi
          if compgen -G ".build/**/*linux-x64*.tar.gz" > /dev/null; then
            cp -v $(ls .build/**/*linux-x64*.tar.gz) release/ || true
          fi
          # Fallback: tar the linux-x64 folder
          if [ -z "$(ls -A release 2>/dev/null)" ]; then
            LINUX_DIR="$(find .build -type d -name '*linux-x64*' | head -n1 || true)"
            if [ -n "$LINUX_DIR" ]; then
              ARCHIVE="void-linux-x64-$(date +%Y%m%d%H%M).tar.gz"
              tar -czf "release/$ARCHIVE" -C "$LINUX_DIR/.." "$(basename "$LINUX_DIR")"
            fi
          fi
          echo "Release assets:"; ls -alh release || true

      # Optional: keep a copy of artifacts for debugging CI runs
      - name: Upload build artifacts (debug)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: linux-x64-release
          path: release/*

      # ── Publish GitHub Release via semantic-release ────────────────────────────
      - name: Semantic Release (GitHub)
        env:
          GIT_AUTHOR_NAME: "Nathan Jobrayan"
          GIT_AUTHOR_EMAIL: "nathanjobrayan@gmail.com"
          GIT_COMMITTER_NAME: "Nathan Jobrayan"
          GIT_COMMITTER_EMAIL: "nathanjobrayan@gmail.com"
        run: npm run release
