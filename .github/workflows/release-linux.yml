name: Release (Linux x64)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: release-linux-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  issues: read
  pull-requests: read

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    env:
      # semantic-release needs this to create the GitHub Release
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Disable any accidental code-signing discovery in CI
      CSC_IDENTITY_AUTO_DISCOVERY: "false"
      # VS Code/Chromium downloads not needed on CI
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: "1"
      # Make gulp a touch quieter
      CI: "true"

    steps:
      # --- Git & Node toolchain ---
      - name: Checkout (full history for tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      # --- System packages for native node modules & Electron runtime ---
      - name: Install system libraries for native modules
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            python3 \
            pkg-config \
            libkrb5-dev \
            libsecret-1-dev \
            libxkbfile-dev \
            libxkbcommon-dev \
            libxkbcommon-x11-dev \
            libx11-dev \
            libnss3 \
            libgtk-3-0 \
            libatk-bridge2.0-0 \
            libgbm-dev

      # --- JS deps ---
      - name: Install dependencies
        run: npm ci

      - name: Verify gulp is available
        run: npx --yes gulp --version

      # --- Build the React UI that your TS imports expect ---
      # This generates ./src/vs/workbench/contrib/void/browser/react/out/**
      - name: Build React (void UI)
        run: npm run buildreact

      # --- Build (VS Code-style) ---
      - name: Compile sources (gulp compile)
        run: npx --yes gulp compile

      # Use the CI packager variant to avoid bundling local non-native extensions
      # which is where your previous run threw "Invalid glob argument"
      - name: Package Linux x64 (CI variant)
        run: npx --yes gulp vscode-linux-x64-min-ci

      # Helpful when debugging CI
      - name: List built artifacts (debug)
        run: |
          echo "Tree under .build/"
          (ls -alh .build || true)
          (find .build -maxdepth 4 -type f | sort || true)

      # --- Gather release files for semantic-release assets ---
      - name: Prepare release assets
        run: |
          set -euxo pipefail
          mkdir -p release

          # Common places gulp writes archives in OSS forks
          shopt -s globstar nullglob
          for pattern in \
            ".build/**/*linux-x64*.zip" \
            ".build/**/*linux-x64*.tar.gz" \
            ".build/**/linux-x64/**/archive/*.zip" \
            ".build/**/linux-x64/**/archive/*.tar.gz" \
            ".build/**/*void*linux*x64*.{zip,tar.gz}"; do
            for f in $pattern; do
              echo "Collecting $f"
              cp -v "$f" release/ || true
            done
          done

          # Fallback: tar any linux-x64 folder if no archive exists
          if [ -z "$(ls -A release 2>/dev/null)" ]; then
            LINUX_DIR="$(find .build -type d -name '*linux-x64*' | head -n1 || true)"
            if [ -n "$LINUX_DIR" ]; then
              ARCHIVE="void-linux-x64-$(date +%Y%m%d%H%M).tar.gz"
              tar -czf "release/$ARCHIVE" -C "$LINUX_DIR/.." "$(basename "$LINUX_DIR")"
            fi
          fi

          echo "Release assets:"
          ls -alh release || true

      # --- Publish GitHub Release via semantic-release ---
      - name: Semantic Release
        env:
          GIT_AUTHOR_NAME: "void-ci"
          GIT_AUTHOR_EMAIL: "ci@void.dev"
          GIT_COMMITTER_NAME: "void-ci"
          GIT_COMMITTER_EMAIL: "ci@void.dev"
        run: npm run release
